!function(l,Z){"object"==typeof exports&&"undefined"!=typeof module?module.exports=Z(require("worker_threads")):"function"==typeof define&&define.amd?define(["worker_threads"],Z):(l="undefined"!=typeof globalThis?globalThis:l||self)["w-json-stream"]=Z(l.worker_threads)}(this,(function(l){"use strict";function Z(l){return l&&"object"==typeof l&&"default"in l?l:{default:l}}var d=Z(l);function m(l){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(l){return typeof l}:function(l){return l&&"function"==typeof Symbol&&l.constructor===Symbol&&l!==Symbol.prototype?"symbol":typeof l},m(l)}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function b(l){var Z={exports:{}};return l(Z,Z.exports),Z.exports}var G=b((function(l,Z){l.exports=function(l){function Z(l,Z){(null==Z||Z>l.length)&&(Z=l.length);for(var d=0,m=new Array(Z);d<Z;d++)m[d]=l[d];return m}function d(l){return function(l){if(Array.isArray(l))return Z(l)}(l)||function(l){if("undefined"!=typeof Symbol&&null!=l[Symbol.iterator]||null!=l["@@iterator"])return Array.from(l)}(l)||function(l,d){if(l){if("string"==typeof l)return Z(l,d);var m=Object.prototype.toString.call(l).slice(8,-1);return"Object"===m&&l.constructor&&(m=l.constructor.name),"Map"===m||"Set"===m?Array.from(l):"Arguments"===m||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(m)?Z(l,d):void 0}}(l)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function b(l,Z,d,m,b,G,c){try{var X=l[G](c),W=X.value}catch(l){return void d(l)}X.done?Z(W):Promise.resolve(W).then(m,b)}function G(l){return function(){var Z=this,d=arguments;return new Promise((function(m,G){var c=l.apply(Z,d);function X(l){b(c,m,G,X,W,"next",l)}function W(l){b(c,m,G,X,W,"throw",l)}X(void 0)}))}}function c(l){return c="function"==typeof Symbol&&"symbol"==m(Symbol.iterator)?function(l){return m(l)}:function(l){return l&&"function"==typeof Symbol&&l.constructor===Symbol&&l!==Symbol.prototype?"symbol":m(l)},c(l)}function X(l){var Z={exports:{}};return l(Z,Z.exports),Z.exports}var W,u=X((function(l){var Z=function(l){var Z,d=Object.prototype,m=d.hasOwnProperty,b="function"==typeof Symbol?Symbol:{},G=b.iterator||"@@iterator",X=b.asyncIterator||"@@asyncIterator",W=b.toStringTag||"@@toStringTag";function u(l,Z,d){return Object.defineProperty(l,Z,{value:d,enumerable:!0,configurable:!0,writable:!0}),l[Z]}try{u({},"")}catch(l){u=function(l,Z,d){return l[Z]=d}}function i(l,Z,d,m){var b=Z&&Z.prototype instanceof Y?Z:Y,G=Object.create(b.prototype),c=new t(m||[]);return G._invoke=function(l,Z,d){var m=p;return function(b,G){if(m===h)throw new Error("Generator is already running");if(m===I){if("throw"===b)throw G;return g()}for(d.method=b,d.arg=G;;){var c=d.delegate;if(c){var X=S(c,d);if(X){if(X===a)continue;return X}}if("next"===d.method)d.sent=d._sent=d.arg;else if("throw"===d.method){if(m===p)throw m=I,d.arg;d.dispatchException(d.arg)}else"return"===d.method&&d.abrupt("return",d.arg);m=h;var W=y(l,Z,d);if("normal"===W.type){if(m=d.done?I:V,W.arg===a)continue;return{value:W.arg,done:d.done}}"throw"===W.type&&(m=I,d.method="throw",d.arg=W.arg)}}}(l,d,c),G}function y(l,Z,d){try{return{type:"normal",arg:l.call(Z,d)}}catch(l){return{type:"throw",arg:l}}}l.wrap=i;var p="suspendedStart",V="suspendedYield",h="executing",I="completed",a={};function Y(){}function R(){}function K(){}var o={};u(o,G,(function(){return this}));var L=Object.getPrototypeOf,n=L&&L(L(T([])));n&&n!==d&&m.call(n,G)&&(o=n);var J=K.prototype=Y.prototype=Object.create(o);function s(l){["next","throw","return"].forEach((function(Z){u(l,Z,(function(l){return this._invoke(Z,l)}))}))}function H(l,Z){function d(b,G,X,W){var u=y(l[b],l,G);if("throw"!==u.type){var i=u.arg,p=i.value;return p&&"object"===c(p)&&m.call(p,"__await")?Z.resolve(p.__await).then((function(l){d("next",l,X,W)}),(function(l){d("throw",l,X,W)})):Z.resolve(p).then((function(l){i.value=l,X(i)}),(function(l){return d("throw",l,X,W)}))}W(u.arg)}var b;this._invoke=function(l,m){function G(){return new Z((function(Z,b){d(l,m,Z,b)}))}return b=b?b.then(G,G):G()}}function S(l,d){var m=l.iterator[d.method];if(m===Z){if(d.delegate=null,"throw"===d.method){if(l.iterator.return&&(d.method="return",d.arg=Z,S(l,d),"throw"===d.method))return a;d.method="throw",d.arg=new TypeError("The iterator does not provide a 'throw' method")}return a}var b=y(m,l.iterator,d.arg);if("throw"===b.type)return d.method="throw",d.arg=b.arg,d.delegate=null,a;var G=b.arg;return G?G.done?(d[l.resultName]=G.value,d.next=l.nextLoc,"return"!==d.method&&(d.method="next",d.arg=Z),d.delegate=null,a):G:(d.method="throw",d.arg=new TypeError("iterator result is not an object"),d.delegate=null,a)}function C(l){var Z={tryLoc:l[0]};1 in l&&(Z.catchLoc=l[1]),2 in l&&(Z.finallyLoc=l[2],Z.afterLoc=l[3]),this.tryEntries.push(Z)}function x(l){var Z=l.completion||{};Z.type="normal",delete Z.arg,l.completion=Z}function t(l){this.tryEntries=[{tryLoc:"root"}],l.forEach(C,this),this.reset(!0)}function T(l){if(l){var d=l[G];if(d)return d.call(l);if("function"==typeof l.next)return l;if(!isNaN(l.length)){var b=-1,c=function d(){for(;++b<l.length;)if(m.call(l,b))return d.value=l[b],d.done=!1,d;return d.value=Z,d.done=!0,d};return c.next=c}}return{next:g}}function g(){return{value:Z,done:!0}}return R.prototype=K,u(J,"constructor",K),u(K,"constructor",R),R.displayName=u(K,W,"GeneratorFunction"),l.isGeneratorFunction=function(l){var Z="function"==typeof l&&l.constructor;return!!Z&&(Z===R||"GeneratorFunction"===(Z.displayName||Z.name))},l.mark=function(l){return Object.setPrototypeOf?Object.setPrototypeOf(l,K):(l.__proto__=K,u(l,W,"GeneratorFunction")),l.prototype=Object.create(J),l},l.awrap=function(l){return{__await:l}},s(H.prototype),u(H.prototype,X,(function(){return this})),l.AsyncIterator=H,l.async=function(Z,d,m,b,G){void 0===G&&(G=Promise);var c=new H(i(Z,d,m,b),G);return l.isGeneratorFunction(d)?c:c.next().then((function(l){return l.done?l.value:c.next()}))},s(J),u(J,W,"Generator"),u(J,G,(function(){return this})),u(J,"toString",(function(){return"[object Generator]"})),l.keys=function(l){var Z=[];for(var d in l)Z.push(d);return Z.reverse(),function d(){for(;Z.length;){var m=Z.pop();if(m in l)return d.value=m,d.done=!1,d}return d.done=!0,d}},l.values=T,t.prototype={constructor:t,reset:function(l){if(this.prev=0,this.next=0,this.sent=this._sent=Z,this.done=!1,this.delegate=null,this.method="next",this.arg=Z,this.tryEntries.forEach(x),!l)for(var d in this)"t"===d.charAt(0)&&m.call(this,d)&&!isNaN(+d.slice(1))&&(this[d]=Z)},stop:function(){this.done=!0;var l=this.tryEntries[0].completion;if("throw"===l.type)throw l.arg;return this.rval},dispatchException:function(l){if(this.done)throw l;var d=this;function b(m,b){return X.type="throw",X.arg=l,d.next=m,b&&(d.method="next",d.arg=Z),!!b}for(var G=this.tryEntries.length-1;G>=0;--G){var c=this.tryEntries[G],X=c.completion;if("root"===c.tryLoc)return b("end");if(c.tryLoc<=this.prev){var W=m.call(c,"catchLoc"),u=m.call(c,"finallyLoc");if(W&&u){if(this.prev<c.catchLoc)return b(c.catchLoc,!0);if(this.prev<c.finallyLoc)return b(c.finallyLoc)}else if(W){if(this.prev<c.catchLoc)return b(c.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return b(c.finallyLoc)}}}},abrupt:function(l,Z){for(var d=this.tryEntries.length-1;d>=0;--d){var b=this.tryEntries[d];if(b.tryLoc<=this.prev&&m.call(b,"finallyLoc")&&this.prev<b.finallyLoc){var G=b;break}}G&&("break"===l||"continue"===l)&&G.tryLoc<=Z&&Z<=G.finallyLoc&&(G=null);var c=G?G.completion:{};return c.type=l,c.arg=Z,G?(this.method="next",this.next=G.finallyLoc,a):this.complete(c)},complete:function(l,Z){if("throw"===l.type)throw l.arg;return"break"===l.type||"continue"===l.type?this.next=l.arg:"return"===l.type?(this.rval=this.arg=l.arg,this.method="return",this.next="end"):"normal"===l.type&&Z&&(this.next=Z),a},finish:function(l){for(var Z=this.tryEntries.length-1;Z>=0;--Z){var d=this.tryEntries[Z];if(d.finallyLoc===l)return this.complete(d.completion,d.afterLoc),x(d),a}},catch:function(l){for(var Z=this.tryEntries.length-1;Z>=0;--Z){var d=this.tryEntries[Z];if(d.tryLoc===l){var m=d.completion;if("throw"===m.type){var b=m.arg;x(d)}return b}}throw new Error("illegal catch attempt")},delegateYield:function(l,d,m){return this.delegate={iterator:T(l),resultName:d,nextLoc:m},"next"===this.method&&(this.arg=Z),a}},l}(l.exports);try{regeneratorRuntime=Z}catch(l){"object"===("undefined"==typeof globalThis?"undefined":c(globalThis))?globalThis.regeneratorRuntime=Z:Function("r","regeneratorRuntime = r")(Z)}})),i=X((function(l){var Z=Object.prototype.hasOwnProperty,d="~";function m(){}function b(l,Z,d){this.fn=l,this.context=Z,this.once=d||!1}function G(l,Z,m,G,c){if("function"!=typeof m)throw new TypeError("The listener must be a function");var X=new b(m,G||l,c),W=d?d+Z:Z;return l._events[W]?l._events[W].fn?l._events[W]=[l._events[W],X]:l._events[W].push(X):(l._events[W]=X,l._eventsCount++),l}function c(l,Z){0==--l._eventsCount?l._events=new m:delete l._events[Z]}function X(){this._events=new m,this._eventsCount=0}Object.create&&(m.prototype=Object.create(null),(new m).__proto__||(d=!1)),X.prototype.eventNames=function(){var l,m,b=[];if(0===this._eventsCount)return b;for(m in l=this._events)Z.call(l,m)&&b.push(d?m.slice(1):m);return Object.getOwnPropertySymbols?b.concat(Object.getOwnPropertySymbols(l)):b},X.prototype.listeners=function(l){var Z=d?d+l:l,m=this._events[Z];if(!m)return[];if(m.fn)return[m.fn];for(var b=0,G=m.length,c=new Array(G);b<G;b++)c[b]=m[b].fn;return c},X.prototype.listenerCount=function(l){var Z=d?d+l:l,m=this._events[Z];return m?m.fn?1:m.length:0},X.prototype.emit=function(l,Z,m,b,G,c){var X=d?d+l:l;if(!this._events[X])return!1;var W,u,i=this._events[X],y=arguments.length;if(i.fn){switch(i.once&&this.removeListener(l,i.fn,void 0,!0),y){case 1:return i.fn.call(i.context),!0;case 2:return i.fn.call(i.context,Z),!0;case 3:return i.fn.call(i.context,Z,m),!0;case 4:return i.fn.call(i.context,Z,m,b),!0;case 5:return i.fn.call(i.context,Z,m,b,G),!0;case 6:return i.fn.call(i.context,Z,m,b,G,c),!0}for(u=1,W=new Array(y-1);u<y;u++)W[u-1]=arguments[u];i.fn.apply(i.context,W)}else{var p,V=i.length;for(u=0;u<V;u++)switch(i[u].once&&this.removeListener(l,i[u].fn,void 0,!0),y){case 1:i[u].fn.call(i[u].context);break;case 2:i[u].fn.call(i[u].context,Z);break;case 3:i[u].fn.call(i[u].context,Z,m);break;case 4:i[u].fn.call(i[u].context,Z,m,b);break;default:if(!W)for(p=1,W=new Array(y-1);p<y;p++)W[p-1]=arguments[p];i[u].fn.apply(i[u].context,W)}}return!0},X.prototype.on=function(l,Z,d){return G(this,l,Z,d,!1)},X.prototype.once=function(l,Z,d){return G(this,l,Z,d,!0)},X.prototype.removeListener=function(l,Z,m,b){var G=d?d+l:l;if(!this._events[G])return this;if(!Z)return c(this,G),this;var X=this._events[G];if(X.fn)X.fn!==Z||b&&!X.once||m&&X.context!==m||c(this,G);else{for(var W=0,u=[],i=X.length;W<i;W++)(X[W].fn!==Z||b&&!X[W].once||m&&X[W].context!==m)&&u.push(X[W]);u.length?this._events[G]=1===u.length?u[0]:u:c(this,G)}return this},X.prototype.removeAllListeners=function(l){var Z;return l?(Z=d?d+l:l,this._events[Z]&&c(this,Z)):(this._events=new m,this._eventsCount=0),this},X.prototype.off=X.prototype.removeListener,X.prototype.addListener=X.prototype.on,X.prefixed=d,X.EventEmitter=X,l.exports=X}));return function(){if("nodejs"!=("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;function Z(){return new i}function m(){var l,Z,d=new Promise((function(){l=arguments[0],Z=arguments[1]}));return d.resolve=l,d.reject=Z,d}function b(){for(var l=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,Z=[],d="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),m=d.length,b=0;b<l;b++)Z[b]=d[0|Math.random()*m];return Z.join("")}var c,X=(c="",Buffer.from(c,"base64").toString("utf8"));function y(){var d=Z();function G(Z){try{return new l.Worker(Z,{eval:!0})}catch(l){V(l)}}var c=G(X);if(!c)return V("invalid worker"),null;function W(){c?(c.terminate(),c=void 0):V("worker has been terminated")}function u(){var l={mode:"init",type:"object",input:Array.prototype.slice.call(arguments)};c.postMessage(l)}function i(){var l=m(),Z=b(),G={mode:"call",id:Z,fun:"stringify",input:Array.prototype.slice.call(arguments)};return c.postMessage(G),d.once(Z,(function(Z){"success"===Z.state?l.resolve(Z.msg):l.reject(Z.msg)})),l}function y(){var l=m(),Z=b(),G={mode:"call",id:Z,fun:"parse",input:Array.prototype.slice.call(arguments)};return c.postMessage(G),d.once(Z,(function(Z){"success"===Z.state?l.resolve(Z.msg):l.reject(Z.msg)})),l}function p(l){var Z=l,m=Z.mode;"emit"!==m&&"return"!==m||("emit"===m&&d.emit(Z.evName,Z.msg),"return"===m&&d.emit(Z.id,Z))}function V(l){d.emit("error",l)}return c.on("message",p),c.on("error",V),u(Array.prototype.slice.call(arguments)),d.stringify=i,d.parse=y,d.terminate=W,d}var p,V,h={stringify:(V=G(u.mark((function l(){var Z,m,b,G=arguments;return u.wrap((function(l){for(;;)switch(l.prev=l.next){case 0:return Z=Array.prototype.slice.call(G),m=y(),l.next=4,m.stringify.apply(m,d(Z)).finally((function(){m.terminate()}));case 4:return b=l.sent,l.abrupt("return",b);case 6:case"end":return l.stop()}}),l)}))),function(){return V.apply(this,arguments)}),parse:(p=G(u.mark((function l(){var Z,m,b,G=arguments;return u.wrap((function(l){for(;;)switch(l.prev=l.next){case 0:return Z=Array.prototype.slice.call(G),m=y(),l.next=4,m.parse.apply(m,d(Z)).finally((function(){m.terminate()}));case 4:return b=l.sent,l.abrupt("return",b);case 6:case"end":return l.stop()}}),l)}))),function(){return p.apply(this,arguments)})};for(var I in W=Z(),h){var a=h[I];W[I]=a}}(),W}(d.default)})),c=b((function(l,Z){l.exports=function(){function l(l,Z){(null==Z||Z>l.length)&&(Z=l.length);for(var d=0,m=new Array(Z);d<Z;d++)m[d]=l[d];return m}function Z(Z){return function(Z){if(Array.isArray(Z))return l(Z)}(Z)||function(l){if("undefined"!=typeof Symbol&&null!=l[Symbol.iterator]||null!=l["@@iterator"])return Array.from(l)}(Z)||function(Z,d){if(Z){if("string"==typeof Z)return l(Z,d);var m=Object.prototype.toString.call(Z).slice(8,-1);return"Object"===m&&Z.constructor&&(m=Z.constructor.name),"Map"===m||"Set"===m?Array.from(Z):"Arguments"===m||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(m)?l(Z,d):void 0}}(Z)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(l,Z,d,m,b,G,c){try{var X=l[G](c),W=X.value}catch(l){return void d(l)}X.done?Z(W):Promise.resolve(W).then(m,b)}function b(l){return function(){var Z=this,m=arguments;return new Promise((function(b,G){var c=l.apply(Z,m);function X(l){d(c,b,G,X,W,"next",l)}function W(l){d(c,b,G,X,W,"throw",l)}X(void 0)}))}}function G(l){return G="function"==typeof Symbol&&"symbol"==m(Symbol.iterator)?function(l){return m(l)}:function(l){return l&&"function"==typeof Symbol&&l.constructor===Symbol&&l!==Symbol.prototype?"symbol":m(l)},G(l)}function c(l){var Z={exports:{}};return l(Z,Z.exports),Z.exports}var X,W,u=c((function(l){var Z=function(l){var Z,d=Object.prototype,m=d.hasOwnProperty,b="function"==typeof Symbol?Symbol:{},c=b.iterator||"@@iterator",X=b.asyncIterator||"@@asyncIterator",W=b.toStringTag||"@@toStringTag";function u(l,Z,d){return Object.defineProperty(l,Z,{value:d,enumerable:!0,configurable:!0,writable:!0}),l[Z]}try{u({},"")}catch(l){u=function(l,Z,d){return l[Z]=d}}function i(l,Z,d,m){var b=Z&&Z.prototype instanceof Y?Z:Y,G=Object.create(b.prototype),c=new t(m||[]);return G._invoke=function(l,Z,d){var m=p;return function(b,G){if(m===h)throw new Error("Generator is already running");if(m===I){if("throw"===b)throw G;return g()}for(d.method=b,d.arg=G;;){var c=d.delegate;if(c){var X=S(c,d);if(X){if(X===a)continue;return X}}if("next"===d.method)d.sent=d._sent=d.arg;else if("throw"===d.method){if(m===p)throw m=I,d.arg;d.dispatchException(d.arg)}else"return"===d.method&&d.abrupt("return",d.arg);m=h;var W=y(l,Z,d);if("normal"===W.type){if(m=d.done?I:V,W.arg===a)continue;return{value:W.arg,done:d.done}}"throw"===W.type&&(m=I,d.method="throw",d.arg=W.arg)}}}(l,d,c),G}function y(l,Z,d){try{return{type:"normal",arg:l.call(Z,d)}}catch(l){return{type:"throw",arg:l}}}l.wrap=i;var p="suspendedStart",V="suspendedYield",h="executing",I="completed",a={};function Y(){}function R(){}function K(){}var o={};u(o,c,(function(){return this}));var L=Object.getPrototypeOf,n=L&&L(L(T([])));n&&n!==d&&m.call(n,c)&&(o=n);var J=K.prototype=Y.prototype=Object.create(o);function s(l){["next","throw","return"].forEach((function(Z){u(l,Z,(function(l){return this._invoke(Z,l)}))}))}function H(l,Z){function d(b,c,X,W){var u=y(l[b],l,c);if("throw"!==u.type){var i=u.arg,p=i.value;return p&&"object"===G(p)&&m.call(p,"__await")?Z.resolve(p.__await).then((function(l){d("next",l,X,W)}),(function(l){d("throw",l,X,W)})):Z.resolve(p).then((function(l){i.value=l,X(i)}),(function(l){return d("throw",l,X,W)}))}W(u.arg)}var b;this._invoke=function(l,m){function G(){return new Z((function(Z,b){d(l,m,Z,b)}))}return b=b?b.then(G,G):G()}}function S(l,d){var m=l.iterator[d.method];if(m===Z){if(d.delegate=null,"throw"===d.method){if(l.iterator.return&&(d.method="return",d.arg=Z,S(l,d),"throw"===d.method))return a;d.method="throw",d.arg=new TypeError("The iterator does not provide a 'throw' method")}return a}var b=y(m,l.iterator,d.arg);if("throw"===b.type)return d.method="throw",d.arg=b.arg,d.delegate=null,a;var G=b.arg;return G?G.done?(d[l.resultName]=G.value,d.next=l.nextLoc,"return"!==d.method&&(d.method="next",d.arg=Z),d.delegate=null,a):G:(d.method="throw",d.arg=new TypeError("iterator result is not an object"),d.delegate=null,a)}function C(l){var Z={tryLoc:l[0]};1 in l&&(Z.catchLoc=l[1]),2 in l&&(Z.finallyLoc=l[2],Z.afterLoc=l[3]),this.tryEntries.push(Z)}function x(l){var Z=l.completion||{};Z.type="normal",delete Z.arg,l.completion=Z}function t(l){this.tryEntries=[{tryLoc:"root"}],l.forEach(C,this),this.reset(!0)}function T(l){if(l){var d=l[c];if(d)return d.call(l);if("function"==typeof l.next)return l;if(!isNaN(l.length)){var b=-1,G=function d(){for(;++b<l.length;)if(m.call(l,b))return d.value=l[b],d.done=!1,d;return d.value=Z,d.done=!0,d};return G.next=G}}return{next:g}}function g(){return{value:Z,done:!0}}return R.prototype=K,u(J,"constructor",K),u(K,"constructor",R),R.displayName=u(K,W,"GeneratorFunction"),l.isGeneratorFunction=function(l){var Z="function"==typeof l&&l.constructor;return!!Z&&(Z===R||"GeneratorFunction"===(Z.displayName||Z.name))},l.mark=function(l){return Object.setPrototypeOf?Object.setPrototypeOf(l,K):(l.__proto__=K,u(l,W,"GeneratorFunction")),l.prototype=Object.create(J),l},l.awrap=function(l){return{__await:l}},s(H.prototype),u(H.prototype,X,(function(){return this})),l.AsyncIterator=H,l.async=function(Z,d,m,b,G){void 0===G&&(G=Promise);var c=new H(i(Z,d,m,b),G);return l.isGeneratorFunction(d)?c:c.next().then((function(l){return l.done?l.value:c.next()}))},s(J),u(J,W,"Generator"),u(J,c,(function(){return this})),u(J,"toString",(function(){return"[object Generator]"})),l.keys=function(l){var Z=[];for(var d in l)Z.push(d);return Z.reverse(),function d(){for(;Z.length;){var m=Z.pop();if(m in l)return d.value=m,d.done=!1,d}return d.done=!0,d}},l.values=T,t.prototype={constructor:t,reset:function(l){if(this.prev=0,this.next=0,this.sent=this._sent=Z,this.done=!1,this.delegate=null,this.method="next",this.arg=Z,this.tryEntries.forEach(x),!l)for(var d in this)"t"===d.charAt(0)&&m.call(this,d)&&!isNaN(+d.slice(1))&&(this[d]=Z)},stop:function(){this.done=!0;var l=this.tryEntries[0].completion;if("throw"===l.type)throw l.arg;return this.rval},dispatchException:function(l){if(this.done)throw l;var d=this;function b(m,b){return X.type="throw",X.arg=l,d.next=m,b&&(d.method="next",d.arg=Z),!!b}for(var G=this.tryEntries.length-1;G>=0;--G){var c=this.tryEntries[G],X=c.completion;if("root"===c.tryLoc)return b("end");if(c.tryLoc<=this.prev){var W=m.call(c,"catchLoc"),u=m.call(c,"finallyLoc");if(W&&u){if(this.prev<c.catchLoc)return b(c.catchLoc,!0);if(this.prev<c.finallyLoc)return b(c.finallyLoc)}else if(W){if(this.prev<c.catchLoc)return b(c.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return b(c.finallyLoc)}}}},abrupt:function(l,Z){for(var d=this.tryEntries.length-1;d>=0;--d){var b=this.tryEntries[d];if(b.tryLoc<=this.prev&&m.call(b,"finallyLoc")&&this.prev<b.finallyLoc){var G=b;break}}G&&("break"===l||"continue"===l)&&G.tryLoc<=Z&&Z<=G.finallyLoc&&(G=null);var c=G?G.completion:{};return c.type=l,c.arg=Z,G?(this.method="next",this.next=G.finallyLoc,a):this.complete(c)},complete:function(l,Z){if("throw"===l.type)throw l.arg;return"break"===l.type||"continue"===l.type?this.next=l.arg:"return"===l.type?(this.rval=this.arg=l.arg,this.method="return",this.next="end"):"normal"===l.type&&Z&&(this.next=Z),a},finish:function(l){for(var Z=this.tryEntries.length-1;Z>=0;--Z){var d=this.tryEntries[Z];if(d.finallyLoc===l)return this.complete(d.completion,d.afterLoc),x(d),a}},catch:function(l){for(var Z=this.tryEntries.length-1;Z>=0;--Z){var d=this.tryEntries[Z];if(d.tryLoc===l){var m=d.completion;if("throw"===m.type){var b=m.arg;x(d)}return b}}throw new Error("illegal catch attempt")},delegateYield:function(l,d,m){return this.delegate={iterator:T(l),resultName:d,nextLoc:m},"next"===this.method&&(this.arg=Z),a}},l}(l.exports);try{regeneratorRuntime=Z}catch(l){"object"===("undefined"==typeof globalThis?"undefined":G(globalThis))?globalThis.regeneratorRuntime=Z:Function("r","regeneratorRuntime = r")(Z)}})),i="function"==typeof atob,y="function"==typeof Buffer,p="function"==typeof TextDecoder?new TextDecoder:void 0,V=("function"==typeof TextEncoder&&new TextEncoder,Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=")),h=(X={},V.forEach((function(l,Z){return X[l]=Z})),X),I=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,a=String.fromCharCode.bind(String),Y="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):function(l){var Z=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(l){return l};return new Uint8Array(Array.prototype.slice.call(l,0).map(Z))},R=function(l){return l.replace(/[^A-Za-z0-9\+\/]/g,"")},K=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,o=function(l){switch(l.length){case 4:var Z=((7&l.charCodeAt(0))<<18|(63&l.charCodeAt(1))<<12|(63&l.charCodeAt(2))<<6|63&l.charCodeAt(3))-65536;return a(55296+(Z>>>10))+a(56320+(1023&Z));case 3:return a((15&l.charCodeAt(0))<<12|(63&l.charCodeAt(1))<<6|63&l.charCodeAt(2));default:return a((31&l.charCodeAt(0))<<6|63&l.charCodeAt(1))}},L=function(l){return l.replace(K,o)},n=function(l){if(l=l.replace(/\s+/g,""),!I.test(l))throw new TypeError("malformed base64.");l+="==".slice(2-(3&l.length));for(var Z,d,m,b="",G=0;G<l.length;)Z=h[l.charAt(G++)]<<18|h[l.charAt(G++)]<<12|(d=h[l.charAt(G++)])<<6|(m=h[l.charAt(G++)]),b+=64===d?a(Z>>16&255):64===m?a(Z>>16&255,Z>>8&255):a(Z>>16&255,Z>>8&255,255&Z);return b},J=i?function(l){return atob(R(l))}:y?function(l){return Buffer.from(l,"base64").toString("binary")}:n,s=y?function(l){return Y(Buffer.from(l,"base64"))}:function(l){return Y(J(l),(function(l){return l.charCodeAt(0)}))},H=y?function(l){return Buffer.from(l,"base64").toString("utf8")}:p?function(l){return p.decode(s(l))}:function(l){return L(J(l))},S=function(l){return R(l.replace(/[-_]/g,(function(l){return"-"==l?"+":"/"})))},C=function(l){return H(S(l))},x=C,t=c((function(l){var Z=Object.prototype.hasOwnProperty,d="~";function m(){}function b(l,Z,d){this.fn=l,this.context=Z,this.once=d||!1}function G(l,Z,m,G,c){if("function"!=typeof m)throw new TypeError("The listener must be a function");var X=new b(m,G||l,c),W=d?d+Z:Z;return l._events[W]?l._events[W].fn?l._events[W]=[l._events[W],X]:l._events[W].push(X):(l._events[W]=X,l._eventsCount++),l}function c(l,Z){0==--l._eventsCount?l._events=new m:delete l._events[Z]}function X(){this._events=new m,this._eventsCount=0}Object.create&&(m.prototype=Object.create(null),(new m).__proto__||(d=!1)),X.prototype.eventNames=function(){var l,m,b=[];if(0===this._eventsCount)return b;for(m in l=this._events)Z.call(l,m)&&b.push(d?m.slice(1):m);return Object.getOwnPropertySymbols?b.concat(Object.getOwnPropertySymbols(l)):b},X.prototype.listeners=function(l){var Z=d?d+l:l,m=this._events[Z];if(!m)return[];if(m.fn)return[m.fn];for(var b=0,G=m.length,c=new Array(G);b<G;b++)c[b]=m[b].fn;return c},X.prototype.listenerCount=function(l){var Z=d?d+l:l,m=this._events[Z];return m?m.fn?1:m.length:0},X.prototype.emit=function(l,Z,m,b,G,c){var X=d?d+l:l;if(!this._events[X])return!1;var W,u,i=this._events[X],y=arguments.length;if(i.fn){switch(i.once&&this.removeListener(l,i.fn,void 0,!0),y){case 1:return i.fn.call(i.context),!0;case 2:return i.fn.call(i.context,Z),!0;case 3:return i.fn.call(i.context,Z,m),!0;case 4:return i.fn.call(i.context,Z,m,b),!0;case 5:return i.fn.call(i.context,Z,m,b,G),!0;case 6:return i.fn.call(i.context,Z,m,b,G,c),!0}for(u=1,W=new Array(y-1);u<y;u++)W[u-1]=arguments[u];i.fn.apply(i.context,W)}else{var p,V=i.length;for(u=0;u<V;u++)switch(i[u].once&&this.removeListener(l,i[u].fn,void 0,!0),y){case 1:i[u].fn.call(i[u].context);break;case 2:i[u].fn.call(i[u].context,Z);break;case 3:i[u].fn.call(i[u].context,Z,m);break;case 4:i[u].fn.call(i[u].context,Z,m,b);break;default:if(!W)for(p=1,W=new Array(y-1);p<y;p++)W[p-1]=arguments[p];i[u].fn.apply(i[u].context,W)}}return!0},X.prototype.on=function(l,Z,d){return G(this,l,Z,d,!1)},X.prototype.once=function(l,Z,d){return G(this,l,Z,d,!0)},X.prototype.removeListener=function(l,Z,m,b){var G=d?d+l:l;if(!this._events[G])return this;if(!Z)return c(this,G),this;var X=this._events[G];if(X.fn)X.fn!==Z||b&&!X.once||m&&X.context!==m||c(this,G);else{for(var W=0,u=[],i=X.length;W<i;W++)(X[W].fn!==Z||b&&!X[W].once||m&&X[W].context!==m)&&u.push(X[W]);u.length?this._events[G]=1===u.length?u[0]:u:c(this,G)}return this},X.prototype.removeAllListeners=function(l){var Z;return l?(Z=d?d+l:l,this._events[Z]&&c(this,Z)):(this._events=new m,this._eventsCount=0),this},X.prototype.off=X.prototype.removeListener,X.prototype.addListener=X.prototype.on,X.prefixed=d,X.EventEmitter=X,l.exports=X}));return function(){if("browser"!=("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;function l(){return new t}function d(){var l,Z,d=new Promise((function(){l=arguments[0],Z=arguments[1]}));return d.resolve=l,d.reject=Z,d}function m(){for(var l=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,Z=[],d="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),m=d.length,b=0;b<l;b++)Z[b]=d[0|Math.random()*m];return Z.join("")}var G=x("");function c(){var Z=l();function b(l){try{var Z=new Blob([l]),d=window.URL||window.webkitURL;return new Worker(d.createObjectURL(Z))}catch(l){p(l)}}var c=b(G);if(!c)return p("invalid worker"),null;function X(){c?(c.terminate(),c=void 0):p("worker has been terminated")}function W(){var l={mode:"init",type:"object",input:Array.prototype.slice.call(arguments)};c.postMessage(l)}function u(){var l=d(),b=m(),G={mode:"call",id:b,fun:"stringify",input:Array.prototype.slice.call(arguments)};return c.postMessage(G),Z.once(b,(function(Z){"success"===Z.state?l.resolve(Z.msg):l.reject(Z.msg)})),l}function i(){var l=d(),b=m(),G={mode:"call",id:b,fun:"parse",input:Array.prototype.slice.call(arguments)};return c.postMessage(G),Z.once(b,(function(Z){"success"===Z.state?l.resolve(Z.msg):l.reject(Z.msg)})),l}function y(l){var d=l,m=d.mode;"emit"!==m&&"return"!==m||("emit"===m&&Z.emit(d.evName,d.msg),"return"===m&&Z.emit(d.id,d))}function p(l){Z.emit("error",l)}return c.onmessage=function(l){y(l.data)},c.onerror=p,W(Array.prototype.slice.call(arguments)),Z.stringify=u,Z.parse=i,Z.terminate=X,Z}var X,i,y={stringify:(i=b(u.mark((function l(){var d,m,b,G=arguments;return u.wrap((function(l){for(;;)switch(l.prev=l.next){case 0:return d=Array.prototype.slice.call(G),m=c(),l.next=4,m.stringify.apply(m,Z(d)).finally((function(){m.terminate()}));case 4:return b=l.sent,l.abrupt("return",b);case 6:case"end":return l.stop()}}),l)}))),function(){return i.apply(this,arguments)}),parse:(X=b(u.mark((function l(){var d,m,b,G=arguments;return u.wrap((function(l){for(;;)switch(l.prev=l.next){case 0:return d=Array.prototype.slice.call(G),m=c(),l.next=4,m.parse.apply(m,Z(d)).finally((function(){m.terminate()}));case 4:return b=l.sent,l.abrupt("return",b);case 6:case"end":return l.stop()}}),l)}))),function(){return X.apply(this,arguments)})};for(var p in W=l(),y){var V=y[p];W[p]=V}}(),W}()}));return"undefined"!=typeof window&&void 0!==window.document?c:G}));
