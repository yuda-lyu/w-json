!function(l,Z){"object"==typeof exports&&"undefined"!=typeof module?module.exports=Z(require("worker_threads")):"function"==typeof define&&define.amd?define(["worker_threads"],Z):(l="undefined"!=typeof globalThis?globalThis:l||self)["w-json-stream"]=Z(l.worker_threads)}(this,(function(l){"use strict";function Z(l){return l&&"object"==typeof l&&"default"in l?l:{default:l}}var d=Z(l);function m(l){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(l){return typeof l}:function(l){return l&&"function"==typeof Symbol&&l.constructor===Symbol&&l!==Symbol.prototype?"symbol":typeof l},m(l)}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function c(l){var Z={exports:{}};return l(Z,Z.exports),Z.exports}var b=c((function(l,Z){l.exports=function(l){function Z(l,Z){(null==Z||Z>l.length)&&(Z=l.length);for(var d=0,m=new Array(Z);d<Z;d++)m[d]=l[d];return m}function d(l){return function(l){if(Array.isArray(l))return Z(l)}(l)||function(l){if("undefined"!=typeof Symbol&&null!=l[Symbol.iterator]||null!=l["@@iterator"])return Array.from(l)}(l)||function(l,d){if(l){if("string"==typeof l)return Z(l,d);var m=Object.prototype.toString.call(l).slice(8,-1);return"Object"===m&&l.constructor&&(m=l.constructor.name),"Map"===m||"Set"===m?Array.from(l):"Arguments"===m||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(m)?Z(l,d):void 0}}(l)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(l,Z,d,m,c,b,G){try{var X=l[b](G),i=X.value}catch(l){return void d(l)}X.done?Z(i):Promise.resolve(i).then(m,c)}function b(l){return function(){var Z=this,d=arguments;return new Promise((function(m,b){var G=l.apply(Z,d);function X(l){c(G,m,b,X,i,"next",l)}function i(l){c(G,m,b,X,i,"throw",l)}X(void 0)}))}}function G(l){return G="function"==typeof Symbol&&"symbol"==m(Symbol.iterator)?function(l){return m(l)}:function(l){return l&&"function"==typeof Symbol&&l.constructor===Symbol&&l!==Symbol.prototype?"symbol":m(l)},G(l)}function X(l){var Z={exports:{}};return l(Z,Z.exports),Z.exports}var i,W=X((function(l){var Z=function(l){var Z,d=Object.prototype,m=d.hasOwnProperty,c="function"==typeof Symbol?Symbol:{},b=c.iterator||"@@iterator",X=c.asyncIterator||"@@asyncIterator",i=c.toStringTag||"@@toStringTag";function W(l,Z,d){return Object.defineProperty(l,Z,{value:d,enumerable:!0,configurable:!0,writable:!0}),l[Z]}try{W({},"")}catch(l){W=function(l,Z,d){return l[Z]=d}}function u(l,Z,d,m){var c=Z&&Z.prototype instanceof n?Z:n,b=Object.create(c.prototype),G=new x(m||[]);return b._invoke=function(l,Z,d){var m=I;return function(c,b){if(m===V)throw new Error("Generator is already running");if(m===h){if("throw"===c)throw b;return g()}for(d.method=c,d.arg=b;;){var G=d.delegate;if(G){var X=H(G,d);if(X){if(X===a)continue;return X}}if("next"===d.method)d.sent=d._sent=d.arg;else if("throw"===d.method){if(m===I)throw m=h,d.arg;d.dispatchException(d.arg)}else"return"===d.method&&d.abrupt("return",d.arg);m=V;var i=y(l,Z,d);if("normal"===i.type){if(m=d.done?h:p,i.arg===a)continue;return{value:i.arg,done:d.done}}"throw"===i.type&&(m=h,d.method="throw",d.arg=i.arg)}}}(l,d,G),b}function y(l,Z,d){try{return{type:"normal",arg:l.call(Z,d)}}catch(l){return{type:"throw",arg:l}}}l.wrap=u;var I="suspendedStart",p="suspendedYield",V="executing",h="completed",a={};function n(){}function o(){}function K(){}var Y={};W(Y,b,(function(){return this}));var R=Object.getPrototypeOf,L=R&&R(R(T([])));L&&L!==d&&m.call(L,b)&&(Y=L);var s=K.prototype=n.prototype=Object.create(Y);function J(l){["next","throw","return"].forEach((function(Z){W(l,Z,(function(l){return this._invoke(Z,l)}))}))}function t(l,Z){function d(c,b,X,i){var W=y(l[c],l,b);if("throw"!==W.type){var u=W.arg,I=u.value;return I&&"object"===G(I)&&m.call(I,"__await")?Z.resolve(I.__await).then((function(l){d("next",l,X,i)}),(function(l){d("throw",l,X,i)})):Z.resolve(I).then((function(l){u.value=l,X(u)}),(function(l){return d("throw",l,X,i)}))}i(W.arg)}var c;this._invoke=function(l,m){function b(){return new Z((function(Z,c){d(l,m,Z,c)}))}return c=c?c.then(b,b):b()}}function H(l,d){var m=l.iterator[d.method];if(m===Z){if(d.delegate=null,"throw"===d.method){if(l.iterator.return&&(d.method="return",d.arg=Z,H(l,d),"throw"===d.method))return a;d.method="throw",d.arg=new TypeError("The iterator does not provide a 'throw' method")}return a}var c=y(m,l.iterator,d.arg);if("throw"===c.type)return d.method="throw",d.arg=c.arg,d.delegate=null,a;var b=c.arg;return b?b.done?(d[l.resultName]=b.value,d.next=l.nextLoc,"return"!==d.method&&(d.method="next",d.arg=Z),d.delegate=null,a):b:(d.method="throw",d.arg=new TypeError("iterator result is not an object"),d.delegate=null,a)}function S(l){var Z={tryLoc:l[0]};1 in l&&(Z.catchLoc=l[1]),2 in l&&(Z.finallyLoc=l[2],Z.afterLoc=l[3]),this.tryEntries.push(Z)}function C(l){var Z=l.completion||{};Z.type="normal",delete Z.arg,l.completion=Z}function x(l){this.tryEntries=[{tryLoc:"root"}],l.forEach(S,this),this.reset(!0)}function T(l){if(l){var d=l[b];if(d)return d.call(l);if("function"==typeof l.next)return l;if(!isNaN(l.length)){var c=-1,G=function d(){for(;++c<l.length;)if(m.call(l,c))return d.value=l[c],d.done=!1,d;return d.value=Z,d.done=!0,d};return G.next=G}}return{next:g}}function g(){return{value:Z,done:!0}}return o.prototype=K,W(s,"constructor",K),W(K,"constructor",o),o.displayName=W(K,i,"GeneratorFunction"),l.isGeneratorFunction=function(l){var Z="function"==typeof l&&l.constructor;return!!Z&&(Z===o||"GeneratorFunction"===(Z.displayName||Z.name))},l.mark=function(l){return Object.setPrototypeOf?Object.setPrototypeOf(l,K):(l.__proto__=K,W(l,i,"GeneratorFunction")),l.prototype=Object.create(s),l},l.awrap=function(l){return{__await:l}},J(t.prototype),W(t.prototype,X,(function(){return this})),l.AsyncIterator=t,l.async=function(Z,d,m,c,b){void 0===b&&(b=Promise);var G=new t(u(Z,d,m,c),b);return l.isGeneratorFunction(d)?G:G.next().then((function(l){return l.done?l.value:G.next()}))},J(s),W(s,i,"Generator"),W(s,b,(function(){return this})),W(s,"toString",(function(){return"[object Generator]"})),l.keys=function(l){var Z=[];for(var d in l)Z.push(d);return Z.reverse(),function d(){for(;Z.length;){var m=Z.pop();if(m in l)return d.value=m,d.done=!1,d}return d.done=!0,d}},l.values=T,x.prototype={constructor:x,reset:function(l){if(this.prev=0,this.next=0,this.sent=this._sent=Z,this.done=!1,this.delegate=null,this.method="next",this.arg=Z,this.tryEntries.forEach(C),!l)for(var d in this)"t"===d.charAt(0)&&m.call(this,d)&&!isNaN(+d.slice(1))&&(this[d]=Z)},stop:function(){this.done=!0;var l=this.tryEntries[0].completion;if("throw"===l.type)throw l.arg;return this.rval},dispatchException:function(l){if(this.done)throw l;var d=this;function c(m,c){return X.type="throw",X.arg=l,d.next=m,c&&(d.method="next",d.arg=Z),!!c}for(var b=this.tryEntries.length-1;b>=0;--b){var G=this.tryEntries[b],X=G.completion;if("root"===G.tryLoc)return c("end");if(G.tryLoc<=this.prev){var i=m.call(G,"catchLoc"),W=m.call(G,"finallyLoc");if(i&&W){if(this.prev<G.catchLoc)return c(G.catchLoc,!0);if(this.prev<G.finallyLoc)return c(G.finallyLoc)}else if(i){if(this.prev<G.catchLoc)return c(G.catchLoc,!0)}else{if(!W)throw new Error("try statement without catch or finally");if(this.prev<G.finallyLoc)return c(G.finallyLoc)}}}},abrupt:function(l,Z){for(var d=this.tryEntries.length-1;d>=0;--d){var c=this.tryEntries[d];if(c.tryLoc<=this.prev&&m.call(c,"finallyLoc")&&this.prev<c.finallyLoc){var b=c;break}}b&&("break"===l||"continue"===l)&&b.tryLoc<=Z&&Z<=b.finallyLoc&&(b=null);var G=b?b.completion:{};return G.type=l,G.arg=Z,b?(this.method="next",this.next=b.finallyLoc,a):this.complete(G)},complete:function(l,Z){if("throw"===l.type)throw l.arg;return"break"===l.type||"continue"===l.type?this.next=l.arg:"return"===l.type?(this.rval=this.arg=l.arg,this.method="return",this.next="end"):"normal"===l.type&&Z&&(this.next=Z),a},finish:function(l){for(var Z=this.tryEntries.length-1;Z>=0;--Z){var d=this.tryEntries[Z];if(d.finallyLoc===l)return this.complete(d.completion,d.afterLoc),C(d),a}},catch:function(l){for(var Z=this.tryEntries.length-1;Z>=0;--Z){var d=this.tryEntries[Z];if(d.tryLoc===l){var m=d.completion;if("throw"===m.type){var c=m.arg;C(d)}return c}}throw new Error("illegal catch attempt")},delegateYield:function(l,d,m){return this.delegate={iterator:T(l),resultName:d,nextLoc:m},"next"===this.method&&(this.arg=Z),a}},l}(l.exports);try{regeneratorRuntime=Z}catch(l){"object"===("undefined"==typeof globalThis?"undefined":G(globalThis))?globalThis.regeneratorRuntime=Z:Function("r","regeneratorRuntime = r")(Z)}})),u=X((function(l){var Z=Object.prototype.hasOwnProperty,d="~";function m(){}function c(l,Z,d){this.fn=l,this.context=Z,this.once=d||!1}function b(l,Z,m,b,G){if("function"!=typeof m)throw new TypeError("The listener must be a function");var X=new c(m,b||l,G),i=d?d+Z:Z;return l._events[i]?l._events[i].fn?l._events[i]=[l._events[i],X]:l._events[i].push(X):(l._events[i]=X,l._eventsCount++),l}function G(l,Z){0==--l._eventsCount?l._events=new m:delete l._events[Z]}function X(){this._events=new m,this._eventsCount=0}Object.create&&(m.prototype=Object.create(null),(new m).__proto__||(d=!1)),X.prototype.eventNames=function(){var l,m,c=[];if(0===this._eventsCount)return c;for(m in l=this._events)Z.call(l,m)&&c.push(d?m.slice(1):m);return Object.getOwnPropertySymbols?c.concat(Object.getOwnPropertySymbols(l)):c},X.prototype.listeners=function(l){var Z=d?d+l:l,m=this._events[Z];if(!m)return[];if(m.fn)return[m.fn];for(var c=0,b=m.length,G=new Array(b);c<b;c++)G[c]=m[c].fn;return G},X.prototype.listenerCount=function(l){var Z=d?d+l:l,m=this._events[Z];return m?m.fn?1:m.length:0},X.prototype.emit=function(l,Z,m,c,b,G){var X=d?d+l:l;if(!this._events[X])return!1;var i,W,u=this._events[X],y=arguments.length;if(u.fn){switch(u.once&&this.removeListener(l,u.fn,void 0,!0),y){case 1:return u.fn.call(u.context),!0;case 2:return u.fn.call(u.context,Z),!0;case 3:return u.fn.call(u.context,Z,m),!0;case 4:return u.fn.call(u.context,Z,m,c),!0;case 5:return u.fn.call(u.context,Z,m,c,b),!0;case 6:return u.fn.call(u.context,Z,m,c,b,G),!0}for(W=1,i=new Array(y-1);W<y;W++)i[W-1]=arguments[W];u.fn.apply(u.context,i)}else{var I,p=u.length;for(W=0;W<p;W++)switch(u[W].once&&this.removeListener(l,u[W].fn,void 0,!0),y){case 1:u[W].fn.call(u[W].context);break;case 2:u[W].fn.call(u[W].context,Z);break;case 3:u[W].fn.call(u[W].context,Z,m);break;case 4:u[W].fn.call(u[W].context,Z,m,c);break;default:if(!i)for(I=1,i=new Array(y-1);I<y;I++)i[I-1]=arguments[I];u[W].fn.apply(u[W].context,i)}}return!0},X.prototype.on=function(l,Z,d){return b(this,l,Z,d,!1)},X.prototype.once=function(l,Z,d){return b(this,l,Z,d,!0)},X.prototype.removeListener=function(l,Z,m,c){var b=d?d+l:l;if(!this._events[b])return this;if(!Z)return G(this,b),this;var X=this._events[b];if(X.fn)X.fn!==Z||c&&!X.once||m&&X.context!==m||G(this,b);else{for(var i=0,W=[],u=X.length;i<u;i++)(X[i].fn!==Z||c&&!X[i].once||m&&X[i].context!==m)&&W.push(X[i]);W.length?this._events[b]=1===W.length?W[0]:W:G(this,b)}return this},X.prototype.removeAllListeners=function(l){var Z;return l?(Z=d?d+l:l,this._events[Z]&&G(this,Z)):(this._events=new m,this._eventsCount=0),this},X.prototype.off=X.prototype.removeListener,X.prototype.addListener=X.prototype.on,X.prefixed=d,X.EventEmitter=X,l.exports=X}));return function(){if("nodejs"!=("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;function Z(){return new u}function m(){var l,Z,d=new Promise((function(){l=arguments[0],Z=arguments[1]}));return d.resolve=l,d.reject=Z,d}function c(){for(var l=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,Z=[],d="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),m=d.length,c=0;c<l;c++)Z[c]=d[0|Math.random()*m];return Z.join("")}var G,X=(G="",Buffer.from(G,"base64").toString("utf8"));function y(){var d=Z();function b(Z){try{return new l.Worker(Z,{eval:!0})}catch(l){p(l)}}var G=b(X);if(!G)return p("invalid worker"),null;function i(){G?(G.terminate(),G=void 0):p("worker has been terminated")}function W(){var l={mode:"init",type:"object",input:Array.prototype.slice.call(arguments)};G.postMessage(l)}function u(){var l=m(),Z=c(),b={mode:"call",id:Z,fun:"stringify",input:Array.prototype.slice.call(arguments)};return G.postMessage(b),d.once(Z,(function(Z){"success"===Z.state?l.resolve(Z.msg):l.reject(Z.msg)})),l}function y(){var l=m(),Z=c(),b={mode:"call",id:Z,fun:"parse",input:Array.prototype.slice.call(arguments)};return G.postMessage(b),d.once(Z,(function(Z){"success"===Z.state?l.resolve(Z.msg):l.reject(Z.msg)})),l}function I(l){var Z=l,m=Z.mode;"emit"!==m&&"return"!==m||("emit"===m&&d.emit(Z.evName,Z.msg),"return"===m&&d.emit(Z.id,Z))}function p(l){d.emit("error",l)}return G.on("message",I),G.on("error",p),W(Array.prototype.slice.call(arguments)),d.stringify=u,d.parse=y,d.terminate=i,d}var I,p,V={stringify:(p=b(W.mark((function l(){var Z,m,c,b=arguments;return W.wrap((function(l){for(;;)switch(l.prev=l.next){case 0:return Z=Array.prototype.slice.call(b),m=y(),l.next=4,m.stringify.apply(m,d(Z)).finally((function(){m.terminate()}));case 4:return c=l.sent,l.abrupt("return",c);case 6:case"end":return l.stop()}}),l)}))),function(){return p.apply(this,arguments)}),parse:(I=b(W.mark((function l(){var Z,m,c,b=arguments;return W.wrap((function(l){for(;;)switch(l.prev=l.next){case 0:return Z=Array.prototype.slice.call(b),m=y(),l.next=4,m.parse.apply(m,d(Z)).finally((function(){m.terminate()}));case 4:return c=l.sent,l.abrupt("return",c);case 6:case"end":return l.stop()}}),l)}))),function(){return I.apply(this,arguments)})};for(var h in i=Z(),V){var a=V[h];i[h]=a}}(),i}(d.default)})),G=c((function(l,Z){l.exports=function(){function l(l,Z){(null==Z||Z>l.length)&&(Z=l.length);for(var d=0,m=new Array(Z);d<Z;d++)m[d]=l[d];return m}function Z(Z){return function(Z){if(Array.isArray(Z))return l(Z)}(Z)||function(l){if("undefined"!=typeof Symbol&&null!=l[Symbol.iterator]||null!=l["@@iterator"])return Array.from(l)}(Z)||function(Z,d){if(Z){if("string"==typeof Z)return l(Z,d);var m=Object.prototype.toString.call(Z).slice(8,-1);return"Object"===m&&Z.constructor&&(m=Z.constructor.name),"Map"===m||"Set"===m?Array.from(Z):"Arguments"===m||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(m)?l(Z,d):void 0}}(Z)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(l,Z,d,m,c,b,G){try{var X=l[b](G),i=X.value}catch(l){return void d(l)}X.done?Z(i):Promise.resolve(i).then(m,c)}function c(l){return function(){var Z=this,m=arguments;return new Promise((function(c,b){var G=l.apply(Z,m);function X(l){d(G,c,b,X,i,"next",l)}function i(l){d(G,c,b,X,i,"throw",l)}X(void 0)}))}}function b(l){return b="function"==typeof Symbol&&"symbol"==m(Symbol.iterator)?function(l){return m(l)}:function(l){return l&&"function"==typeof Symbol&&l.constructor===Symbol&&l!==Symbol.prototype?"symbol":m(l)},b(l)}function G(l){var Z={exports:{}};return l(Z,Z.exports),Z.exports}var X,i,W=G((function(l){var Z=function(l){var Z,d=Object.prototype,m=d.hasOwnProperty,c="function"==typeof Symbol?Symbol:{},G=c.iterator||"@@iterator",X=c.asyncIterator||"@@asyncIterator",i=c.toStringTag||"@@toStringTag";function W(l,Z,d){return Object.defineProperty(l,Z,{value:d,enumerable:!0,configurable:!0,writable:!0}),l[Z]}try{W({},"")}catch(l){W=function(l,Z,d){return l[Z]=d}}function u(l,Z,d,m){var c=Z&&Z.prototype instanceof n?Z:n,b=Object.create(c.prototype),G=new x(m||[]);return b._invoke=function(l,Z,d){var m=I;return function(c,b){if(m===V)throw new Error("Generator is already running");if(m===h){if("throw"===c)throw b;return g()}for(d.method=c,d.arg=b;;){var G=d.delegate;if(G){var X=H(G,d);if(X){if(X===a)continue;return X}}if("next"===d.method)d.sent=d._sent=d.arg;else if("throw"===d.method){if(m===I)throw m=h,d.arg;d.dispatchException(d.arg)}else"return"===d.method&&d.abrupt("return",d.arg);m=V;var i=y(l,Z,d);if("normal"===i.type){if(m=d.done?h:p,i.arg===a)continue;return{value:i.arg,done:d.done}}"throw"===i.type&&(m=h,d.method="throw",d.arg=i.arg)}}}(l,d,G),b}function y(l,Z,d){try{return{type:"normal",arg:l.call(Z,d)}}catch(l){return{type:"throw",arg:l}}}l.wrap=u;var I="suspendedStart",p="suspendedYield",V="executing",h="completed",a={};function n(){}function o(){}function K(){}var Y={};W(Y,G,(function(){return this}));var R=Object.getPrototypeOf,L=R&&R(R(T([])));L&&L!==d&&m.call(L,G)&&(Y=L);var s=K.prototype=n.prototype=Object.create(Y);function J(l){["next","throw","return"].forEach((function(Z){W(l,Z,(function(l){return this._invoke(Z,l)}))}))}function t(l,Z){function d(c,G,X,i){var W=y(l[c],l,G);if("throw"!==W.type){var u=W.arg,I=u.value;return I&&"object"===b(I)&&m.call(I,"__await")?Z.resolve(I.__await).then((function(l){d("next",l,X,i)}),(function(l){d("throw",l,X,i)})):Z.resolve(I).then((function(l){u.value=l,X(u)}),(function(l){return d("throw",l,X,i)}))}i(W.arg)}var c;this._invoke=function(l,m){function b(){return new Z((function(Z,c){d(l,m,Z,c)}))}return c=c?c.then(b,b):b()}}function H(l,d){var m=l.iterator[d.method];if(m===Z){if(d.delegate=null,"throw"===d.method){if(l.iterator.return&&(d.method="return",d.arg=Z,H(l,d),"throw"===d.method))return a;d.method="throw",d.arg=new TypeError("The iterator does not provide a 'throw' method")}return a}var c=y(m,l.iterator,d.arg);if("throw"===c.type)return d.method="throw",d.arg=c.arg,d.delegate=null,a;var b=c.arg;return b?b.done?(d[l.resultName]=b.value,d.next=l.nextLoc,"return"!==d.method&&(d.method="next",d.arg=Z),d.delegate=null,a):b:(d.method="throw",d.arg=new TypeError("iterator result is not an object"),d.delegate=null,a)}function S(l){var Z={tryLoc:l[0]};1 in l&&(Z.catchLoc=l[1]),2 in l&&(Z.finallyLoc=l[2],Z.afterLoc=l[3]),this.tryEntries.push(Z)}function C(l){var Z=l.completion||{};Z.type="normal",delete Z.arg,l.completion=Z}function x(l){this.tryEntries=[{tryLoc:"root"}],l.forEach(S,this),this.reset(!0)}function T(l){if(l){var d=l[G];if(d)return d.call(l);if("function"==typeof l.next)return l;if(!isNaN(l.length)){var c=-1,b=function d(){for(;++c<l.length;)if(m.call(l,c))return d.value=l[c],d.done=!1,d;return d.value=Z,d.done=!0,d};return b.next=b}}return{next:g}}function g(){return{value:Z,done:!0}}return o.prototype=K,W(s,"constructor",K),W(K,"constructor",o),o.displayName=W(K,i,"GeneratorFunction"),l.isGeneratorFunction=function(l){var Z="function"==typeof l&&l.constructor;return!!Z&&(Z===o||"GeneratorFunction"===(Z.displayName||Z.name))},l.mark=function(l){return Object.setPrototypeOf?Object.setPrototypeOf(l,K):(l.__proto__=K,W(l,i,"GeneratorFunction")),l.prototype=Object.create(s),l},l.awrap=function(l){return{__await:l}},J(t.prototype),W(t.prototype,X,(function(){return this})),l.AsyncIterator=t,l.async=function(Z,d,m,c,b){void 0===b&&(b=Promise);var G=new t(u(Z,d,m,c),b);return l.isGeneratorFunction(d)?G:G.next().then((function(l){return l.done?l.value:G.next()}))},J(s),W(s,i,"Generator"),W(s,G,(function(){return this})),W(s,"toString",(function(){return"[object Generator]"})),l.keys=function(l){var Z=[];for(var d in l)Z.push(d);return Z.reverse(),function d(){for(;Z.length;){var m=Z.pop();if(m in l)return d.value=m,d.done=!1,d}return d.done=!0,d}},l.values=T,x.prototype={constructor:x,reset:function(l){if(this.prev=0,this.next=0,this.sent=this._sent=Z,this.done=!1,this.delegate=null,this.method="next",this.arg=Z,this.tryEntries.forEach(C),!l)for(var d in this)"t"===d.charAt(0)&&m.call(this,d)&&!isNaN(+d.slice(1))&&(this[d]=Z)},stop:function(){this.done=!0;var l=this.tryEntries[0].completion;if("throw"===l.type)throw l.arg;return this.rval},dispatchException:function(l){if(this.done)throw l;var d=this;function c(m,c){return X.type="throw",X.arg=l,d.next=m,c&&(d.method="next",d.arg=Z),!!c}for(var b=this.tryEntries.length-1;b>=0;--b){var G=this.tryEntries[b],X=G.completion;if("root"===G.tryLoc)return c("end");if(G.tryLoc<=this.prev){var i=m.call(G,"catchLoc"),W=m.call(G,"finallyLoc");if(i&&W){if(this.prev<G.catchLoc)return c(G.catchLoc,!0);if(this.prev<G.finallyLoc)return c(G.finallyLoc)}else if(i){if(this.prev<G.catchLoc)return c(G.catchLoc,!0)}else{if(!W)throw new Error("try statement without catch or finally");if(this.prev<G.finallyLoc)return c(G.finallyLoc)}}}},abrupt:function(l,Z){for(var d=this.tryEntries.length-1;d>=0;--d){var c=this.tryEntries[d];if(c.tryLoc<=this.prev&&m.call(c,"finallyLoc")&&this.prev<c.finallyLoc){var b=c;break}}b&&("break"===l||"continue"===l)&&b.tryLoc<=Z&&Z<=b.finallyLoc&&(b=null);var G=b?b.completion:{};return G.type=l,G.arg=Z,b?(this.method="next",this.next=b.finallyLoc,a):this.complete(G)},complete:function(l,Z){if("throw"===l.type)throw l.arg;return"break"===l.type||"continue"===l.type?this.next=l.arg:"return"===l.type?(this.rval=this.arg=l.arg,this.method="return",this.next="end"):"normal"===l.type&&Z&&(this.next=Z),a},finish:function(l){for(var Z=this.tryEntries.length-1;Z>=0;--Z){var d=this.tryEntries[Z];if(d.finallyLoc===l)return this.complete(d.completion,d.afterLoc),C(d),a}},catch:function(l){for(var Z=this.tryEntries.length-1;Z>=0;--Z){var d=this.tryEntries[Z];if(d.tryLoc===l){var m=d.completion;if("throw"===m.type){var c=m.arg;C(d)}return c}}throw new Error("illegal catch attempt")},delegateYield:function(l,d,m){return this.delegate={iterator:T(l),resultName:d,nextLoc:m},"next"===this.method&&(this.arg=Z),a}},l}(l.exports);try{regeneratorRuntime=Z}catch(l){"object"===("undefined"==typeof globalThis?"undefined":b(globalThis))?globalThis.regeneratorRuntime=Z:Function("r","regeneratorRuntime = r")(Z)}})),u="function"==typeof atob,y="function"==typeof Buffer,I="function"==typeof TextDecoder?new TextDecoder:void 0,p=("function"==typeof TextEncoder&&new TextEncoder,Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=")),V=(X={},p.forEach((function(l,Z){return X[l]=Z})),X),h=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,a=String.fromCharCode.bind(String),n="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):function(l){var Z=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(l){return l};return new Uint8Array(Array.prototype.slice.call(l,0).map(Z))},o=function(l){return l.replace(/[^A-Za-z0-9\+\/]/g,"")},K=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,Y=function(l){switch(l.length){case 4:var Z=((7&l.charCodeAt(0))<<18|(63&l.charCodeAt(1))<<12|(63&l.charCodeAt(2))<<6|63&l.charCodeAt(3))-65536;return a(55296+(Z>>>10))+a(56320+(1023&Z));case 3:return a((15&l.charCodeAt(0))<<12|(63&l.charCodeAt(1))<<6|63&l.charCodeAt(2));default:return a((31&l.charCodeAt(0))<<6|63&l.charCodeAt(1))}},R=function(l){return l.replace(K,Y)},L=function(l){if(l=l.replace(/\s+/g,""),!h.test(l))throw new TypeError("malformed base64.");l+="==".slice(2-(3&l.length));for(var Z,d,m,c="",b=0;b<l.length;)Z=V[l.charAt(b++)]<<18|V[l.charAt(b++)]<<12|(d=V[l.charAt(b++)])<<6|(m=V[l.charAt(b++)]),c+=64===d?a(Z>>16&255):64===m?a(Z>>16&255,Z>>8&255):a(Z>>16&255,Z>>8&255,255&Z);return c},s=u?function(l){return atob(o(l))}:y?function(l){return Buffer.from(l,"base64").toString("binary")}:L,J=y?function(l){return n(Buffer.from(l,"base64"))}:function(l){return n(s(l),(function(l){return l.charCodeAt(0)}))},t=y?function(l){return Buffer.from(l,"base64").toString("utf8")}:I?function(l){return I.decode(J(l))}:function(l){return R(s(l))},H=function(l){return o(l.replace(/[-_]/g,(function(l){return"-"==l?"+":"/"})))},S=function(l){return t(H(l))},C=S,x=G((function(l){var Z=Object.prototype.hasOwnProperty,d="~";function m(){}function c(l,Z,d){this.fn=l,this.context=Z,this.once=d||!1}function b(l,Z,m,b,G){if("function"!=typeof m)throw new TypeError("The listener must be a function");var X=new c(m,b||l,G),i=d?d+Z:Z;return l._events[i]?l._events[i].fn?l._events[i]=[l._events[i],X]:l._events[i].push(X):(l._events[i]=X,l._eventsCount++),l}function G(l,Z){0==--l._eventsCount?l._events=new m:delete l._events[Z]}function X(){this._events=new m,this._eventsCount=0}Object.create&&(m.prototype=Object.create(null),(new m).__proto__||(d=!1)),X.prototype.eventNames=function(){var l,m,c=[];if(0===this._eventsCount)return c;for(m in l=this._events)Z.call(l,m)&&c.push(d?m.slice(1):m);return Object.getOwnPropertySymbols?c.concat(Object.getOwnPropertySymbols(l)):c},X.prototype.listeners=function(l){var Z=d?d+l:l,m=this._events[Z];if(!m)return[];if(m.fn)return[m.fn];for(var c=0,b=m.length,G=new Array(b);c<b;c++)G[c]=m[c].fn;return G},X.prototype.listenerCount=function(l){var Z=d?d+l:l,m=this._events[Z];return m?m.fn?1:m.length:0},X.prototype.emit=function(l,Z,m,c,b,G){var X=d?d+l:l;if(!this._events[X])return!1;var i,W,u=this._events[X],y=arguments.length;if(u.fn){switch(u.once&&this.removeListener(l,u.fn,void 0,!0),y){case 1:return u.fn.call(u.context),!0;case 2:return u.fn.call(u.context,Z),!0;case 3:return u.fn.call(u.context,Z,m),!0;case 4:return u.fn.call(u.context,Z,m,c),!0;case 5:return u.fn.call(u.context,Z,m,c,b),!0;case 6:return u.fn.call(u.context,Z,m,c,b,G),!0}for(W=1,i=new Array(y-1);W<y;W++)i[W-1]=arguments[W];u.fn.apply(u.context,i)}else{var I,p=u.length;for(W=0;W<p;W++)switch(u[W].once&&this.removeListener(l,u[W].fn,void 0,!0),y){case 1:u[W].fn.call(u[W].context);break;case 2:u[W].fn.call(u[W].context,Z);break;case 3:u[W].fn.call(u[W].context,Z,m);break;case 4:u[W].fn.call(u[W].context,Z,m,c);break;default:if(!i)for(I=1,i=new Array(y-1);I<y;I++)i[I-1]=arguments[I];u[W].fn.apply(u[W].context,i)}}return!0},X.prototype.on=function(l,Z,d){return b(this,l,Z,d,!1)},X.prototype.once=function(l,Z,d){return b(this,l,Z,d,!0)},X.prototype.removeListener=function(l,Z,m,c){var b=d?d+l:l;if(!this._events[b])return this;if(!Z)return G(this,b),this;var X=this._events[b];if(X.fn)X.fn!==Z||c&&!X.once||m&&X.context!==m||G(this,b);else{for(var i=0,W=[],u=X.length;i<u;i++)(X[i].fn!==Z||c&&!X[i].once||m&&X[i].context!==m)&&W.push(X[i]);W.length?this._events[b]=1===W.length?W[0]:W:G(this,b)}return this},X.prototype.removeAllListeners=function(l){var Z;return l?(Z=d?d+l:l,this._events[Z]&&G(this,Z)):(this._events=new m,this._eventsCount=0),this},X.prototype.off=X.prototype.removeListener,X.prototype.addListener=X.prototype.on,X.prefixed=d,X.EventEmitter=X,l.exports=X}));return function(){if("browser"!=("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;function l(){return new x}function d(){var l,Z,d=new Promise((function(){l=arguments[0],Z=arguments[1]}));return d.resolve=l,d.reject=Z,d}function m(){for(var l=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,Z=[],d="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),m=d.length,c=0;c<l;c++)Z[c]=d[0|Math.random()*m];return Z.join("")}var b=C("");function G(){var Z=l();function c(l){try{var Z=new Blob([l]),d=window.URL||window.webkitURL;return new Worker(d.createObjectURL(Z))}catch(l){I(l)}}var G=c(b);if(!G)return I("invalid worker"),null;function X(){G?(G.terminate(),G=void 0):I("worker has been terminated")}function i(){var l={mode:"init",type:"object",input:Array.prototype.slice.call(arguments)};G.postMessage(l)}function W(){var l=d(),c=m(),b={mode:"call",id:c,fun:"stringify",input:Array.prototype.slice.call(arguments)};return G.postMessage(b),Z.once(c,(function(Z){"success"===Z.state?l.resolve(Z.msg):l.reject(Z.msg)})),l}function u(){var l=d(),c=m(),b={mode:"call",id:c,fun:"parse",input:Array.prototype.slice.call(arguments)};return G.postMessage(b),Z.once(c,(function(Z){"success"===Z.state?l.resolve(Z.msg):l.reject(Z.msg)})),l}function y(l){var d=l,m=d.mode;"emit"!==m&&"return"!==m||("emit"===m&&Z.emit(d.evName,d.msg),"return"===m&&Z.emit(d.id,d))}function I(l){Z.emit("error",l)}return G.onmessage=function(l){y(l.data)},G.onerror=I,i(Array.prototype.slice.call(arguments)),Z.stringify=W,Z.parse=u,Z.terminate=X,Z}var X,u,y={stringify:(u=c(W.mark((function l(){var d,m,c,b=arguments;return W.wrap((function(l){for(;;)switch(l.prev=l.next){case 0:return d=Array.prototype.slice.call(b),m=G(),l.next=4,m.stringify.apply(m,Z(d)).finally((function(){m.terminate()}));case 4:return c=l.sent,l.abrupt("return",c);case 6:case"end":return l.stop()}}),l)}))),function(){return u.apply(this,arguments)}),parse:(X=c(W.mark((function l(){var d,m,c,b=arguments;return W.wrap((function(l){for(;;)switch(l.prev=l.next){case 0:return d=Array.prototype.slice.call(b),m=G(),l.next=4,m.parse.apply(m,Z(d)).finally((function(){m.terminate()}));case 4:return c=l.sent,l.abrupt("return",c);case 6:case"end":return l.stop()}}),l)}))),function(){return X.apply(this,arguments)})};for(var I in i=l(),y){var p=y[I];i[I]=p}}(),i}()}));return"undefined"!=typeof window&&void 0!==window.document?G:b}));
